#!/usr/bin/env bash

function usage() {
    echo >&2 "------------------------------"
    echo >&2 "--- dhall-terraform-output ---"
    echo >&2 "------------------------------"
    echo >&2 ""
    echo >&2 "dhall-terraform-output transforms Terraform output into a Dhall record and a type for that record."
    echo >&2 ""
    echo >&2 "Usage: dhall-terraform-output [-?|-h|--help|help] <type_file> <out_file>"
    echo >&2 "  -? -h --help help : Print this help message"
    echo >&2 "          type_file : The file location of the Dhall type to be generated. Will not create directories which don't previously exist."
    echo >&2 "           out_file : The file location of the Dhall output record to be generated. Will not create directories which don't previously exist."
    echo >&2 ""
    echo >&2 "Exit codes:"
    echo >&2 "  0: Success"
    echo >&2 "  1: Dependent tools (jq, dhall) not installed on the path"
    echo >&2 "  2: Terraform output an unsupported type"
    echo >&2 ""
    echo >&2 "Example usage:"
    echo >&2 "  terraform output -json | dhall-terraform-output ./type.dhall ./output.dhall"
    echo >&2 ""
    echo >&2 "Example output:"
    echo >&2 "  for terraform output -json:"
    echo >&2 "      {"
    echo >&2 "          \"aws_vpc_id\": {"
    echo >&2 "              \"sensitive\": false,"
    echo >&2 "              \"type\": \"string\","
    echo >&2 "              \"value\": \"vpc-123abc\""
    echo >&2 "          }"
    echo >&2 "      }"
    echo >&2 ""
    echo >&2 "  ./type.dhall:"
    echo >&2 "      -- Generated by dhall-terraform-output"
    echo >&2 "      { aws_vpc_id : Text } : Type"
    echo >&2 ""
    echo >&2 "  ./output.dhall:"
    echo >&2 "      -- Generated by dhall-terraform-output"
    echo >&2 "      { aws_vpc_id = \"vpc-123abc\" }"

}

function main() {
    set -eo pipefail

    set +u
    if [[ $1 == "-h" ]] || [[ $1 == "--help" ]] || [[ $1 == "help" ]] || [[ $1 == "-?" ]] || [[ -z ${1+x} ]] || [[ -z ${2+x} ]] ; then
        usage
        exit 0
    fi
    set -u

    STDIN=$(cat)

    TYPE_FILE=$(realpath $1)
    OUT_FILE=$(realpath $2)

    if [[ ! -x $(which jq) ]]; then
        echo >&2 "[ERROR] jq must be installed for this script to work, but it was not found in the path! Project page: https://github.com/stedolan/jq"
        exit 1
    fi

    if [[ ! -x $(which dhall) ]]; then
        echo >&2 "[ERROR] dhall must be installed for this script to work, but it was not found in the path! Project page: https://github.com/dhall-lang/dhall-haskell"
        exit 1
    fi

    keys=($(jq -r 'keys|.[]' <<< ${STDIN}))

    echo "-- Generated by dhall-terraform-output" > "${TYPE_FILE}"
    echo "-- Generated by dhall-terraform-output" > "${OUT_FILE}"

    if [[ ${#keys[@]} -eq 0 ]]; then
        echo "{} : Type" > "${TYPE_FILE}"
        echo "{=}" > "${OUT_FILE}"
        exit 0
    fi

    echo "{" >> "${TYPE_FILE}" # Begin type record
    echo "{" >> "${OUT_FILE}"  # Begin output record

    found_unsupported_type_exit="0"
    for key in ${keys[@]} ; do
        type=$(jq -r ".${key}.type | (select(. == \"list\" ) | \"List Text\") // (select (. == \"string\" ) | \"Text\")" <<< ${STDIN})

        if [[ ${type} == "Text" ]]; then
            value=$(jq -r ".${key}.value" <<< ${STDIN})
            natural_re='^[0-9]$|^[1-9][0-9]*$'
            if [[ ${value} =~ ${natural_re} ]]; then
                type="Natural"
            else
                value="\"${value}\""
            fi
            echo "${key} : ${type}" >> ${TYPE_FILE}
            echo "${key} = ${value}" >> ${OUT_FILE}
        elif [[ ${type} == "List Text" ]]; then
            echo "${key} : ${type}" >> ${TYPE_FILE}
            echo "${key} = " >> ${OUT_FILE}
            jq -r ".${key}.value" <<< ${STDIN} >> ${OUT_FILE}
        else
            echo >&2 "[WARNING] Encountered a type (${type}) which is not yet supported for Terraform output (${key}). Skipping."
            found_unsupported_type_exit="2"
            break
        fi

        # will only output commas if not skipped
        echo "," >> "${TYPE_FILE}"
        echo "," >> "${OUT_FILE}"
    done

    # remove the last line (the extra comma)
    if [[ $(uname -s) == "Darwin" ]]; then
      sed -i '' -e '$ d' "${TYPE_FILE}"
      sed -i '' -e '$ d' "${OUT_FILE}"
    else
      sed -e '$ d' -i "${TYPE_FILE}"
      sed -e '$ d' -i "${OUT_FILE}"
    fi

    echo "} : Type" >> "${TYPE_FILE}" # End type record
    echo "}" >> "${OUT_FILE}"  # End output record

    echo >&2 "[INFO] Formatting generated Dhall..."
    dhall format --inplace "${TYPE_FILE}"
    dhall format --inplace "${OUT_FILE}"

    echo >&2 "[INFO] Sanity checking generated Dhall..."
    dhall <<< "${OUT_FILE} : ${TYPE_FILE}" >/dev/null

    echo >&2 "[INFO] Dhall generation complete!"
    if [[ ${found_unsupported_type_exit} -ne 0 ]]; then
        echo >&2 "[WARNING] Encountered unsupported types during parsing. Successfully wrote partial type file to ${TYPE_FILE} and partial output file to ${OUT_FILE}"
        exit ${found_unsupported_type_exit}
    fi

    echo >&2 "[INFO] Successfully wrote type file to ${TYPE_FILE} and output file to ${OUT_FILE}"
}

main "$@"
